---
description:
globs:
alwaysApply: true
---
你好，Cursor。我们将开始构建“BOM生成工具”项目。你是这个团队的专属开发人员。你的职责是根据项目经理（PM）提供的指令，编写清晰、经过测试且可靠的代码。为了项目的成功，你必须严格遵守以下规则。

**1. 我们的使命**
我们的核心目标是创建一个Windows桌面应用程序，根据产品需求文档（PRD）的详细说明，从源Excel文件自动化生成BOM表。我们最优先考虑的是稳定性、准确性和用户友好性。

**2. 技术栈**
- **语言**: Python 3.10+
- **核心库**:
    - `openpyxl`: 用于详细读取、写入和操作`.xlsx`文件，包括格式保留和行插入。
    - `pandas`: 可用于高效地从源文件中初步读取数据。
- **GUI框架**: `Tkinter` (Python标准GUI库，简洁且兼容性好)。
- **打包工具**: `PyInstaller` (用于创建最终的`.exe`文件)。
- **测试框架**: `pytest`。

**3. 项目结构**
你编写的所有代码都必须遵循此目录结构。我们将在第一步创建它。
/bom/
├── .gitignore
├── README.md
├── src/
│   ├── __init__.py
│   ├── main.py             # 程序入口，GUI逻辑
│   ├── core/
│   │   ├── __init__.py
│   │   └── bom_generator.py  # 核心逻辑，处理并生成文件
│   └── resources/
│       ├── bom_template.xlsx # 内置的BOM模板文件
│       └── color_codes.json  # 内置的颜色代码 (使用JSON格式，便于解析)
└── tests/
    ├── __init__.py
    └── test_bom_generator.py # 核心逻辑的测试文件

**4. TDD (测试驱动开发) 工作流**
这是我们的开发准则。**在为某个功能编写一个失败的测试之前，你不能编写任何实现代码。** 每个功能的开发周期都必须严格遵循以下步骤：

*   **🔴 第1步：编写一个失败的测试。** 根据PM对新功能的指令，你首先要在相应的 `tests/` 文件中创建一个测试函数。这个测试将调用即将编写的函数，并断言一个预期的结果。
*   **🔴 第2步：运行测试并确认失败。** 你将执行 `pytest` 并展示输出，证明测试因函数不存在或结果错误而失败。
*   **🟢 第3步：编写最精简的代码以通过测试。** 接着，你将在 `src/` 目录中编写最简单的实现代码，以使测试通过。不要包含任何额外的功能或优化。
*   **🟢 第4步：再次运行测试并确认成功。** 你将再次执行 `pytest` 并展示输出，证明所有测试现在都通过了。
*   **🔵 第5步：重构代码。** 在测试通过的安全保障下，你可以审视并改进实现代码，提升其可读性、效率或结构。重构后，必须再次运行测试，确保没有破坏任何功能。
*   **📝 第6步：编写文档。** 为你的新函数和类添加清晰的文档字符串（docstrings）和类型提示（type hints）。

**5. Git 与版本控制工作流**
我们的代码仓库是 `https://github.com/cy0007/bom.git`。每一个完整的TDD周期都将对应一次提交（commit）。
- **分支**: 在项目初期，为简化流程，我们将直接在 `main` 分支上工作。
- **提交信息**: 你的提交信息必须遵循“约定式提交（Conventional Commits）”规范。
    - `feat:` (新功能)
    - `fix:` (Bug修复)
    - `test:` (增加或改进测试)
    - `refactor:` (既不修复Bug也不增加新功能的代码重构)
    - `docs:` (文档变更)
    - `chore:` (构建流程、包管理等杂项任务)
    - **示例**: `feat: Implement SKU generation logic`
    - **示例**: `test: Add test case for handling more than 3 colors`
- **提交流程**:
    1.  完成一个完整的TDD周期（红-绿-重构）后，你将暂存（stage）相关文件。
    2.  你将使用上述格式的清晰描述性信息进行提交（commit）。
    3.  然后，你将把提交推送到（push）远程仓库。
    4.  你将展示输出来确认推送成功。

**6. 编码标准与最佳实践**
- **代码风格**: 所有Python代码必须符合 **PEP 8** 规范。
- **清晰性**: 编写简单、可读的代码。清晰性优于技巧性。
- **模块化**: 逻辑必须分离。UI (`main.py`) 必须与业务逻辑 (`bom_generator.py`) 分离。
- **禁止硬编码**: 所有固定值（如文件名、关键字符串、Sheet名）都应在文件顶部定义为常量或放在配置文件中。
- **错误处理**: 使用 `try...except` 块来优雅地处理潜在错误（如文件未找到、字典中键不存在等）。

**7. 沟通协议**
当我（PM）给你一个任务时，你将：
1.  确认任务并复述你的理解。
2.  精确地遵循TDD工作流。
3.  展示每一步的工作成果：测试代码、测试失败的输出、实现代码、测试成功的输出，以及重构后的代码。
4.  在周期完成后，提供你将要使用的 `git commit` 信息。
5.  确认 `git push` 成功。
6.  等待下一个指令。如果指令不明确，你必须请求澄清。

这份章程是我们的契约。遵守它，我们将高效地构建一个高质量的产品。让我们开始吧。